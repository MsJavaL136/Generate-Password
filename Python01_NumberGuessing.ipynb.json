{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, what is your name?\n",
      "lor\n",
      "lor Can you guess a number between 30 and 50\n",
      "2\n",
      "lor Your input is not valid\n",
      "lor Can you guess a number between 30 and 50\n",
      "2\n",
      "lor Your input is not valid\n",
      "lor Can you guess a number between 30 and 50\n",
      "36\n",
      "lor too low\n",
      "lor Can you guess a number between 30 and 50\n",
      "40\n",
      "Congratulations ! You win after 5 tries ! \n"
     ]
    }
   ],
   "source": [
    "#project idea: https://github.com/laibanasir/username-password-checker/blob/master/userpass.py\n",
    "### 思考edge case e.g. if guess < 30 or guess > 50 \n",
    "### https://codereview.stackexchange.com/questions/212292/guess-the-number-game-by-a-python-beginner\n",
    "\n",
    "# import the random module for generation of random numbers\n",
    "\n",
    "import random\n",
    "print('Hello, what is your name?')\n",
    "\n",
    "# input function is used to prompt user \n",
    "user_name = input()\n",
    "\n",
    "Secretnumber = random.randint(30,50) \n",
    "    \n",
    "for tries in range(1,7):\n",
    "    print(user_name, 'Can you guess a number between 30 and 50')\n",
    "    guess = int(input())\n",
    "    \n",
    "    \n",
    "    if guess == Secretnumber:\n",
    "        tries += 1\n",
    "        print(\"Congratulations ! You win after \" + str(tries) + \" tries ! \")\n",
    "        break\n",
    "# (congrats user_name, you win after \"str(tries)'' tries\" \n",
    "\n",
    "    elif guess < 30 or guess > 50:\n",
    "        print(user_name, 'Your input is not valid')\n",
    "        tries += 1\n",
    "        \n",
    "    elif guess < Secretnumber: \n",
    "        tries += 1\n",
    "        print(user_name, 'too low')\n",
    "       \n",
    "    elif guess > Secretnumber:\n",
    "        tries += 1\n",
    "        print(user_name, 'too high')\n",
    "    \n",
    "        \n",
    "\n",
    "    elif tries > 6:\n",
    "        break\n",
    "        \n",
    "# 怎解print(\" 'You did not guess the number. It was' str(Secretnumber)\")???\n",
    "                                                   \n",
    "                                                            \n",
    "              \n",
    "#注意 variable, INTEGER, string TypeError: '<' not supported between instances of 'int' and 'str'\n",
    "#experiment, let you did not guess the number appear only AFTER the line guess is too high                        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### while check == 0:\n",
    "    if user_number == com_number:\n",
    "        print(f'Congratulations!')\n",
    "        check = 1\n",
    "    elif user_number > com_number:\n",
    "        number_max = user_number\n",
    "        user_number = int(input(f'Too high... {number_min} < ? < {number_max}\\n'))\n",
    "    else:\n",
    "        number_min = user_number\n",
    "        user_number = int(input(f'Too low... {number_min} < ? < {number_max}\\n'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while check == 0:\n",
    "if user_number == com_number:\n",
    "    print(f'Congratulations!')\n",
    "    check = 1\n",
    "elif user_number > com_number:\n",
    "    number_max = user_number\n",
    "    user_number = int(input(f'Too high... {number_min} < ? < {number_max}\\n'))\n",
    "else:\n",
    "    number_min = user_number\n",
    "    user_number = int(input(f'Too low... {number_min} < ? < {number_max}\\n'))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
